import { z } from 'zod';
export declare const createStudentValidationSchema: z.ZodObject<{
    registrationNumber: z.ZodString;
    level: z.ZodEffects<z.ZodEffects<z.ZodAny, number, any>, number, any>;
    departmentId: z.ZodString;
    passport: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    firstName: z.ZodString;
    lastName: z.ZodString;
    otherNames: z.ZodOptional<z.ZodString>;
    dateOfBirth: z.ZodDate;
    gender: z.ZodEnum<["male", "female"]>;
    disability: z.ZodString;
    maritalStatus: z.ZodEnum<["single", "married"]>;
    email: z.ZodString;
    phoneNumber: z.ZodString;
    NIN: z.ZodString;
    state: z.ZodString;
    lga: z.ZodString;
    nationality: z.ZodString;
    contactAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    registrationNumber?: string;
    level?: number;
    departmentId?: string;
    passport?: string;
    firstName?: string;
    lastName?: string;
    otherNames?: string;
    dateOfBirth?: Date;
    gender?: "male" | "female";
    disability?: string;
    maritalStatus?: "single" | "married";
    email?: string;
    phoneNumber?: string;
    NIN?: string;
    state?: string;
    lga?: string;
    nationality?: string;
    contactAddress?: string;
}, {
    registrationNumber?: string;
    level?: any;
    departmentId?: string;
    passport?: string;
    firstName?: string;
    lastName?: string;
    otherNames?: string;
    dateOfBirth?: Date;
    gender?: "male" | "female";
    disability?: string;
    maritalStatus?: "single" | "married";
    email?: string;
    phoneNumber?: string;
    NIN?: string;
    state?: string;
    lga?: string;
    nationality?: string;
    contactAddress?: string;
}>;
export declare const updateStudentValidationSchema: z.ZodObject<{
    registrationNumber: z.ZodOptional<z.ZodString>;
    level: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodAny, number, any>, number, any>>;
    departmentId: z.ZodOptional<z.ZodString>;
    passport: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    otherNames: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    dateOfBirth: z.ZodOptional<z.ZodDate>;
    gender: z.ZodOptional<z.ZodEnum<["male", "female"]>>;
    disability: z.ZodOptional<z.ZodString>;
    maritalStatus: z.ZodOptional<z.ZodEnum<["single", "married"]>>;
    email: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodOptional<z.ZodString>;
    NIN: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodString>;
    lga: z.ZodOptional<z.ZodString>;
    nationality: z.ZodOptional<z.ZodString>;
    contactAddress: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    registrationNumber?: string;
    level?: number;
    departmentId?: string;
    passport?: string;
    firstName?: string;
    lastName?: string;
    otherNames?: string;
    dateOfBirth?: Date;
    gender?: "male" | "female";
    disability?: string;
    maritalStatus?: "single" | "married";
    email?: string;
    phoneNumber?: string;
    NIN?: string;
    state?: string;
    lga?: string;
    nationality?: string;
    contactAddress?: string;
}, {
    registrationNumber?: string;
    level?: any;
    departmentId?: string;
    passport?: string;
    firstName?: string;
    lastName?: string;
    otherNames?: string;
    dateOfBirth?: Date;
    gender?: "male" | "female";
    disability?: string;
    maritalStatus?: "single" | "married";
    email?: string;
    phoneNumber?: string;
    NIN?: string;
    state?: string;
    lga?: string;
    nationality?: string;
    contactAddress?: string;
}>;
export type CreateStudentDto = Required<z.infer<typeof createStudentValidationSchema>>;
export type UpdateStudentDto = z.infer<typeof updateStudentValidationSchema>;
